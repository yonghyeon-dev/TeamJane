// Weave ERP Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== 사용자 및 인증 =====
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Supabase Auth와 연동
  auth_id String? @unique // Supabase user.id

  // 관계
  profile          Profile?
  clients          Client[]
  projects         Project[]
  documents        Document[]
  invoices         Invoice[]
  transactions     Transaction[]
  tax_calculations TaxCalculation[]
  file_uploads     FileUpload[]
  ai_generations   AiGeneration[]
  share_tokens     ShareToken[]
  schedules        Schedule[]

  @@map("users")
}

model Profile {
  id              String   @id @default(cuid())
  user_id         String   @unique
  name            String?
  business_name   String?
  phone           String?
  business_number String? // 사업자등록번호
  address         String?
  profile_image   String?
  timezone        String   @default("Asia/Seoul")
  currency        String   @default("KRW")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // 관계
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// ===== 클라이언트 관리 =====
model Client {
  id         String       @id @default(cuid())
  user_id    String
  name       String
  company    String?
  email      String?
  phone      String?
  address    String?
  website    String?
  status     ClientStatus @default(ACTIVE)
  notes      String?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  // 관계
  user           User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  contacts       ClientContact[]
  projects       Project[]
  documents      Document[]
  invoices       Invoice[]
  file_uploads   FileUpload[]
  ai_generations AiGeneration[]
  schedules      Schedule[]

  @@index([user_id])
  @@map("clients")
}

model ClientContact {
  id         String   @id @default(cuid())
  client_id  String
  name       String
  email      String?
  phone      String?
  position   String?
  is_primary Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 관계
  client Client @relation(fields: [client_id], references: [id], onDelete: Cascade)

  @@index([client_id])
  @@map("client_contacts")
}

enum ClientStatus {
  ACTIVE // active
  INACTIVE // inactive
  POTENTIAL // potential
}

// ===== 프로젝트 관리 =====
model Project {
  id             String        @id @default(cuid())
  user_id        String
  client_id      String?
  name           String // title -> name으로 변경
  description    String?
  status         ProjectStatus @default(planning) // PENDING -> planning으로 변경
  budget         Decimal?      @db.Decimal(12, 2)
  progress       Int           @default(0) // 0-100
  start_date     DateTime?
  due_date       DateTime? // end_date -> due_date로 변경
  completed_date DateTime? // actual_end_date -> completed_date로 변경
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  // 관계
  user             User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client           Client?            @relation(fields: [client_id], references: [id], onDelete: SetNull)
  documents        Document[]
  invoices         Invoice[]
  schedules        Schedule[]
  ProjectTask      ProjectTask[]
  ProjectStatusLog ProjectStatusLog[]
  TimeEntry        TimeEntry[]
  FileUpload       FileUpload[]
  ShareToken       ShareToken[]
  AiGeneration     AiGeneration[]

  @@index([user_id])
  @@index([client_id])
  @@index([status])
  @@map("projects")
}

model ProjectTask {
  id           String       @id @default(cuid())
  project_id   String
  title        String
  description  String?
  status       TaskStatus   @default(TODO)
  priority     TaskPriority @default(MEDIUM)
  due_date     DateTime?
  completed_at DateTime?
  order_index  Int          @default(0)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  // 관계
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@index([status])
  @@map("project_tasks")
}

model ProjectStatusLog {
  id          String         @id @default(cuid())
  project_id  String
  from_status ProjectStatus?
  to_status   ProjectStatus
  notes       String?
  created_at  DateTime       @default(now())

  // 관계
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@map("project_status_logs")
}

enum ProjectStatus {
  planning // 계획 중
  in_progress // 진행 중
  review // 검토 중
  completed // 완료됨
  cancelled // 취소됨
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ScheduleStatus {
  SCHEDULED // 예정됨
  IN_PROGRESS // 진행 중
  COMPLETED // 완료됨
  CANCELLED // 취소됨
}

// ===== 시간 추적 =====
model TimeEntry {
  id          String    @id @default(cuid())
  project_id  String
  description String?
  start_time  DateTime
  end_time    DateTime?
  duration    Int? // 분 단위
  hourly_rate Decimal?  @db.Decimal(10, 2)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // 관계
  project Project @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id])
  @@map("time_entries")
}

// ===== 일정 관리 =====
model Schedule {
  id          String         @id @default(cuid())
  user_id     String
  client_id   String?
  project_id  String?
  title       String
  description String?
  start_time  DateTime
  end_time    DateTime?
  status      ScheduleStatus @default(SCHEDULED)
  color       String         @default("blue") // blue, green, yellow, red, purple, orange
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt

  // 관계
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client  Client?  @relation(fields: [client_id], references: [id], onDelete: SetNull)
  project Project? @relation(fields: [project_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([start_time])
  @@index([status])
  @@map("schedules")
}

// ===== 문서 관리 =====
model Document {
  id         String         @id @default(cuid())
  user_id    String
  client_id  String?
  project_id String?
  invoice_id String? // 인보이스 연결
  title      String
  type       DocumentType   @default(general) // document_type -> type으로 변경
  file_url   String? // 파일 URL
  file_size  Int? // 파일 크기 (bytes)
  mime_type  String? // MIME 타입
  status     DocumentStatus @default(draft) // DRAFT -> draft로 변경
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  // 관계
  user               User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client             Client?             @relation(fields: [client_id], references: [id], onDelete: SetNull)
  project            Project?            @relation(fields: [project_id], references: [id], onDelete: SetNull)
  invoice            Invoice?            @relation(fields: [invoice_id], references: [id], onDelete: SetNull)
  DocumentTemplate   DocumentTemplate?   @relation(fields: [documentTemplateId], references: [id])
  documentTemplateId String?
  DocumentVersion    DocumentVersion[]
  DocumentSignature  DocumentSignature[]
  AiGeneration       AiGeneration[]

  @@index([user_id])
  @@index([client_id])
  @@index([project_id])
  @@index([type])
  @@index([status])
  @@map("documents")
}

model DocumentTemplate {
  id            String       @id @default(cuid())
  name          String
  document_type DocumentType
  content       Json // 템플릿 내용
  is_default    Boolean      @default(false)
  is_system     Boolean      @default(false) // 시스템 제공 템플릿
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  // 관계
  documents Document[]

  @@index([document_type])
  @@map("document_templates")
}

model DocumentVersion {
  id             String   @id @default(cuid())
  document_id    String
  version_number Int
  content        Json
  changes        String? // 변경 내용 설명
  created_at     DateTime @default(now())

  // 관계
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@unique([document_id, version_number])
  @@index([document_id])
  @@map("document_versions")
}

model DocumentSignature {
  id             String   @id @default(cuid())
  document_id    String
  signer_name    String
  signer_email   String
  signature_data String? // Base64 서명 데이터
  ip_address     String?
  signed_at      DateTime
  created_at     DateTime @default(now())

  // 관계
  document Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@map("document_signatures")
}

enum DocumentType {
  quote // 견적서
  contract // 계약서
  invoice // 청구서
  report // 보고서
  general // 일반 문서
}

enum DocumentStatus {
  draft // 초안
  sent // 발송됨
  approved // 승인됨
  rejected // 거부됨
}

// ===== 청구서 및 결제 =====
model Invoice {
  id             String        @id @default(cuid())
  user_id        String
  client_id      String?
  project_id     String?
  invoice_number String        @unique
  amount         Decimal       @db.Decimal(12, 2) // 기본 금액
  tax_amount     Decimal       @default(0) @db.Decimal(12, 2)
  total_amount   Decimal       @db.Decimal(12, 2) // 총 금액
  status         InvoiceStatus @default(draft) // DRAFT -> draft로 변경
  issue_date     DateTime
  due_date       DateTime
  paid_date      DateTime? // paid_at -> paid_date로 변경
  notes          String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  // 관계
  user             User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client           Client?            @relation(fields: [client_id], references: [id], onDelete: SetNull)
  project          Project?           @relation(fields: [project_id], references: [id], onDelete: SetNull)
  documents        Document[]
  InvoiceItem      InvoiceItem[]
  InvoiceStatusLog InvoiceStatusLog[]
  Transaction      Transaction[]

  @@index([user_id])
  @@index([client_id])
  @@index([project_id])
  @@index([status])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoice_id  String
  description String
  quantity    Decimal  @default(1) @db.Decimal(10, 3)
  unit_price  Decimal  @db.Decimal(10, 2)
  total_price Decimal  @db.Decimal(12, 2)
  order_index Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // 관계
  invoice Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id])
  @@map("invoice_items")
}

model InvoiceStatusLog {
  id          String         @id @default(cuid())
  invoice_id  String
  from_status InvoiceStatus?
  to_status   InvoiceStatus
  notes       String?
  created_at  DateTime       @default(now())

  // 관계
  invoice Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id])
  @@map("invoice_status_logs")
}

enum InvoiceStatus {
  draft // 초안
  sent // 발송됨
  paid // 입금완료
  overdue // 연체
  cancelled // 취소됨
}

// ===== 거래 내역 =====
model Transaction {
  id               String          @id @default(cuid())
  user_id          String
  invoice_id       String?
  transaction_type TransactionType
  amount           Decimal         @db.Decimal(12, 2)
  currency         String          @default("KRW")
  transaction_date DateTime
  description      String
  category         String?
  payment_method   String?
  reference_number String?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  // 관계
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  invoice Invoice? @relation(fields: [invoice_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([transaction_type])
  @@index([transaction_date])
  @@map("transactions")
}

enum TransactionType {
  INCOME // 수입
  EXPENSE // 지출
  TAX // 세금
}

// ===== 세무 관리 =====
model TaxCalculation {
  id           String     @id @default(cuid())
  user_id      String
  year         Int
  month        Int
  income_type  IncomeType
  gross_amount Decimal    @db.Decimal(12, 2)
  tax_rate     Decimal    @db.Decimal(5, 4) // 0.0330 (3.3%)
  tax_amount   Decimal    @db.Decimal(12, 2)
  net_amount   Decimal    @db.Decimal(12, 2)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  // 관계
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, year, month, income_type])
  @@index([user_id])
  @@index([year, month])
  @@map("tax_calculations")
}

enum IncomeType {
  BUSINESS // 사업소득 (3.3%)
  OTHER // 기타소득 (8.8%)
  LECTURE // 강연료
  ROYALTY // 저작권료
}

// ===== 파일 관리 =====
model FileUpload {
  id               String          @id @default(cuid())
  user_id          String
  client_id        String?
  project_id       String?
  share_token_id   String?
  original_name    String
  file_name        String
  file_path        String
  file_size        Int
  mime_type        String
  storage_provider StorageProvider @default(SUPABASE)
  metadata         Json?
  uploaded_at      DateTime        @default(now())

  // 관계
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  client      Client?     @relation(fields: [client_id], references: [id], onDelete: SetNull)
  project     Project?    @relation(fields: [project_id], references: [id], onDelete: SetNull)
  share_token ShareToken? @relation(fields: [share_token_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([client_id])
  @@index([project_id])
  @@index([share_token_id])
  @@map("file_uploads")
}

model ShareToken {
  id            String    @id @default(cuid())
  user_id       String
  project_id    String?
  token         String    @unique
  name          String // 공유 목적 (예: "로고 디자인 자료 수집")
  description   String?
  max_files     Int? // 최대 업로드 파일 수
  max_size_mb   Int? // 최대 파일 크기 (MB)
  allowed_types String[] // 허용 파일 타입
  expires_at    DateTime?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // 관계
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  project      Project?     @relation(fields: [project_id], references: [id], onDelete: SetNull)
  file_uploads FileUpload[]

  @@index([user_id])
  @@index([project_id])
  @@index([token])
  @@index([expires_at])
  @@map("share_tokens")
}

enum StorageProvider {
  SUPABASE
  AWS_S3
  GOOGLE_CLOUD
  LOCAL
}

// ===== AI 기능 =====
model AiGeneration {
  id              String             @id @default(cuid())
  user_id         String
  document_id     String?
  client_id       String?
  project_id      String?
  generation_type AiGenerationType
  prompt          String
  response        String?
  model           String // gpt-4, gpt-3.5-turbo 등
  tokens_used     Int?
  status          AiGenerationStatus @default(PENDING)
  error_message   String?
  created_at      DateTime           @default(now())
  completed_at    DateTime?

  // 관계
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [document_id], references: [id], onDelete: SetNull)
  client   Client?   @relation(fields: [client_id], references: [id], onDelete: SetNull)
  project  Project?  @relation(fields: [project_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([generation_type])
  @@index([status])
  @@map("ai_generations")
}

enum AiGenerationType {
  DOCUMENT_DRAFT // 문서 초안 생성
  EMAIL_SUMMARY // 이메일 요약
  MEETING_SUMMARY // 회의록 요약
  PRICE_SUGGESTION // 가격 제안
  CONTRACT_REVIEW // 계약서 검토
  OTHER // 기타
}

enum AiGenerationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
