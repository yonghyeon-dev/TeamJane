{"version":3,"file":"ThemeContext.jsx","sourceRoot":"","sources":["ThemeContext.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAa,MAAM,OAAO,CAAC;AAC9E,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAc9C,MAAM,YAAY,GAAG,aAAa,CAA+B,SAAS,CAAC,CAAC;AAE5E,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAG,EAAE;IAC3B,MAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;IACzC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,aAAa,GAAiC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;;IAC1E,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAY,MAAM,CAAC,CAAC;IACpE,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,QAAQ,CAAS,SAAS,CAAC,CAAC;IAE9E,yBAAyB;IACzB,MAAM,aAAa,GAAG,CAAA,MAAA,eAAe,CAAC,aAAa,CAAC,IAAI,CACtD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAC1B,0CAAE,MAAM,KAAI;QACX,OAAO,EAAE,SAAS;QAClB,SAAS,EAAE,SAAS;QACpB,OAAO,EAAE,SAAS;KACnB,CAAC;IAEF,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GACrC,QAAQ,CAAiB,aAAa,CAAC,CAAC;IAE1C,MAAM,QAAQ,GAAG,CAAC,KAAgB,EAAE,EAAE;QACpC,eAAe,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC,CAAC;IAEF,MAAM,SAAS,GAAG,CAAC,MAAsB,EAAE,EAAE;QAC3C,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,MAAM,0BAA0B,GAAG,CAAC,EAAU,EAAE,EAAE;QAChD,MAAM,OAAO,GAAG,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACvE,IAAI,OAAO,EAAE,CAAC;YACZ,oBAAoB,CAAC,EAAE,CAAC,CAAC;YACzB,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,YAAY,CAAC,QAAQ,CACpB,KAAK,CAAC,CAAC;YACL,YAAY;YACZ,QAAQ;YACR,aAAa;YACb,SAAS;YACT,iBAAiB;YACjB,oBAAoB,EAAE,0BAA0B;SACjD,CAAC,CAEF;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,YAAY,CAAC,QAAQ,CAAC,CACzB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\nimport { THEME_CONSTANTS } from \"./constants\";\nimport type { ColorSelection } from \"./types\";\n\nexport type ThemeType = \"dark\" | \"white\";\n\ninterface ThemeContextType {\n  currentTheme: ThemeType;\n  setTheme: (theme: ThemeType) => void;\n  currentColors: ColorSelection;\n  setColors: (colors: ColorSelection) => void;\n  selectedPaletteId: string;\n  setSelectedPaletteId: (id: string) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [currentTheme, setCurrentTheme] = useState<ThemeType>(\"dark\");\n  const [selectedPaletteId, setSelectedPaletteId] = useState<string>(\"custom3\");\n\n  // 기본 색상 설정 (custom3 팔레트)\n  const defaultColors = THEME_CONSTANTS.colorPalettes.find(\n    (p) => p.id === \"custom3\"\n  )?.colors || {\n    primary: \"#EC4899\",\n    secondary: \"#DB2777\",\n    default: \"#BE185D\",\n  };\n\n  const [currentColors, setCurrentColors] =\n    useState<ColorSelection>(defaultColors);\n\n  const setTheme = (theme: ThemeType) => {\n    setCurrentTheme(theme);\n  };\n\n  const setColors = (colors: ColorSelection) => {\n    setCurrentColors(colors);\n  };\n\n  const handleSetSelectedPaletteId = (id: string) => {\n    const palette = THEME_CONSTANTS.colorPalettes.find((p) => p.id === id);\n    if (palette) {\n      setSelectedPaletteId(id);\n      setCurrentColors(palette.colors);\n    }\n  };\n\n  return (\n    <ThemeContext.Provider\n      value={{\n        currentTheme,\n        setTheme,\n        currentColors,\n        setColors,\n        selectedPaletteId,\n        setSelectedPaletteId: handleSetSelectedPaletteId,\n      }}\n    >\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"]}