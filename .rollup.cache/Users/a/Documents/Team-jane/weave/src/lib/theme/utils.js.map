{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import themeData from \"./theme.json\";\nimport type { Theme, ButtonVariant, StatusType, AccentColors } from \"./types\";\n\nexport const theme: Theme = themeData as Theme;\n\nexport const getColor = (path: string): string => {\n  const keys = path.split(\".\");\n  let value: unknown = theme;\n\n  for (const key of keys) {\n    if (typeof value === \"object\" && value !== null && key in value) {\n      value = (value as Record<string, unknown>)[key];\n    } else {\n      console.warn(`Color path \"${path}\" not found in theme`);\n      return \"#000000\";\n    }\n  }\n\n  return typeof value === \"string\" ? value : \"#000000\";\n};\n\nexport const getStatusColor = (type: StatusType): string => {\n  return theme.colors.status[type];\n};\n\nexport const getAccentColor = (color: keyof AccentColors): string => {\n  return theme.colors.accent[color];\n};\n\nexport const getButtonStyles = (variant: ButtonVariant) => {\n  return theme.components.button[variant];\n};\n\nexport const getSpacing = (size: keyof Theme[\"spacing\"]): string => {\n  return theme.spacing[size];\n};\n\nexport const getBorderRadius = (size: keyof Theme[\"borderRadius\"]): string => {\n  return theme.borderRadius[size];\n};\n\nexport const getFontSize = (\n  size: keyof Theme[\"typography\"][\"fontSize\"]\n): string => {\n  return theme.typography.fontSize[size];\n};\n\nexport const getFontWeight = (\n  weight: keyof Theme[\"typography\"][\"fontWeight\"]\n): string => {\n  return theme.typography.fontWeight[weight];\n};\n\nexport const getTransition = (type: \"fast\" | \"normal\" | \"slow\"): string => {\n  return theme.transitions[type];\n};\n\nexport const getShadow = (size: keyof Theme[\"shadows\"]): string => {\n  return theme.shadows[size];\n};\n\n// CSS 변수로 테마를 적용하는 함수\nexport const getThemeCSSVariables = (): Record<string, string> => {\n  const cssVars: Record<string, string> = {};\n\n  // Colors\n  Object.entries(theme.colors.primary).forEach(([key, value]) => {\n    cssVars[`--color-primary-${key}`] = value;\n  });\n\n  Object.entries(theme.colors.text).forEach(([key, value]) => {\n    cssVars[`--color-text-${key}`] = value;\n  });\n\n  Object.entries(theme.colors.status).forEach(([key, value]) => {\n    cssVars[`--color-status-${key}`] = value;\n  });\n\n  Object.entries(theme.colors.accent).forEach(([key, value]) => {\n    cssVars[`--color-accent-${key}`] = value;\n  });\n\n  // Spacing\n  Object.entries(theme.spacing).forEach(([key, value]) => {\n    cssVars[`--spacing-${key}`] = value;\n  });\n\n  // Border radius\n  Object.entries(theme.borderRadius).forEach(([key, value]) => {\n    cssVars[`--radius-${key}`] = value;\n  });\n\n  // Font sizes\n  Object.entries(theme.typography.fontSize).forEach(([key, value]) => {\n    cssVars[`--font-size-${key}`] = value;\n  });\n\n  // Font weights\n  Object.entries(theme.typography.fontWeight).forEach(([key, value]) => {\n    cssVars[`--font-weight-${key}`] = value;\n  });\n\n  return cssVars;\n};\n"]}