{"version":3,"file":"Badge.jsx","sourceRoot":"","sources":["Badge.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AASpD,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAC5B,CAAC,EAAE,OAAO,GAAG,SAAS,EAAE,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE;IACjE,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,EAAE,CAAC;IAErC,MAAM,QAAQ,GAAG;QACf,OAAO,EAAE,YAAY;QACrB,SAAS,EAAE,YAAY;QACvB,MAAM,EAAE,YAAY;QACpB,OAAO,EAAE,0BAA0B;QACnC,WAAW,EAAE,4BAA4B;KAC1C,CAAC;IAEF,MAAM,KAAK,GAAG;QACZ,EAAE,EAAE,qBAAqB;QACzB,EAAE,EAAE,uBAAuB;QAC3B,EAAE,EAAE,qBAAqB;KAC1B,CAAC;IAEF,YAAY;IACZ,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC5B,MAAM,MAAM,GAAwB,EAAE,CAAC;QAEvC,QAAQ,OAAO,EAAE,CAAC;YAChB,KAAK,SAAS;gBACZ,MAAM,CAAC,UAAU,GAAG,2BAA2B,aAAa,CAAC,OAAO,KAAK,aAAa,CAAC,SAAS,KAAK,aAAa,CAAC,OAAO,GAAG,CAAC;gBAC9H,MAAM,CAAC,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC;gBAC3C,MAAM;YACR,KAAK,WAAW;gBACd,MAAM,CAAC,UAAU,GAAG,2BAA2B,aAAa,CAAC,SAAS,KAAK,aAAa,CAAC,OAAO,KAAK,aAAa,CAAC,OAAO,GAAG,CAAC;gBAC9H,MAAM,CAAC,WAAW,GAAG,aAAa,CAAC,SAAS,CAAC;gBAC7C,MAAM;YACR,KAAK,QAAQ;gBACX,MAAM,CAAC,UAAU,GAAG,2BAA2B,aAAa,CAAC,OAAO,KAAK,aAAa,CAAC,OAAO,KAAK,aAAa,CAAC,SAAS,GAAG,CAAC;gBAC9H,MAAM,CAAC,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC;gBAC3C,MAAM;YACR,KAAK,SAAS;gBACZ,MAAM,CAAC,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC;gBAC3C,MAAM,CAAC,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC;gBACrC,MAAM;YACR,KAAK,aAAa;gBAChB,yBAAyB;gBACzB,MAAM;QACV,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,GAAG,CACF,GAAG,CAAC,CAAC,GAAG,CAAC,CACT,SAAS,CAAC,CAAC,EAAE,CACX,iDAAiD,EACjD,QAAQ,CAAC,OAAO,CAAC,EACjB,KAAK,CAAC,IAAI,CAAC,EACX,SAAS,CACV,CAAC,CACF,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAE1B;QAAA,CAAC,QAAQ,CACX;MAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,KAAK,CAAC,WAAW,GAAG,OAAO,CAAC;AAE5B,eAAe,KAAK,CAAC","sourcesContent":["\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { useTheme } from \"@/lib/theme/ThemeContext\";\n\nexport interface BadgeProps {\n  variant?: \"primary\" | \"secondary\" | \"accent\" | \"outline\" | \"destructive\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Badge = React.forwardRef<HTMLDivElement, BadgeProps>(\n  ({ variant = \"primary\", size = \"md\", children, className }, ref) => {\n    const { currentColors } = useTheme();\n\n    const variants = {\n      primary: \"text-white\",\n      secondary: \"text-white\",\n      accent: \"text-white\",\n      outline: \"border text-text-primary\",\n      destructive: \"bg-status-error text-white\",\n    };\n\n    const sizes = {\n      sm: \"px-2 py-0.5 text-xs\",\n      md: \"px-2.5 py-0.5 text-sm\",\n      lg: \"px-3 py-1 text-base\",\n    };\n\n    // 동적 스타일 생성\n    const getDynamicStyles = () => {\n      const styles: React.CSSProperties = {};\n\n      switch (variant) {\n        case \"primary\":\n          styles.background = `linear-gradient(135deg, ${currentColors.primary}, ${currentColors.secondary}, ${currentColors.default})`;\n          styles.borderColor = currentColors.primary;\n          break;\n        case \"secondary\":\n          styles.background = `linear-gradient(135deg, ${currentColors.secondary}, ${currentColors.default}, ${currentColors.primary})`;\n          styles.borderColor = currentColors.secondary;\n          break;\n        case \"accent\":\n          styles.background = `linear-gradient(135deg, ${currentColors.default}, ${currentColors.primary}, ${currentColors.secondary})`;\n          styles.borderColor = currentColors.default;\n          break;\n        case \"outline\":\n          styles.borderColor = currentColors.primary;\n          styles.color = currentColors.primary;\n          break;\n        case \"destructive\":\n          // destructive는 기존 스타일 유지\n          break;\n      }\n\n      return styles;\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"inline-flex items-center rounded-md font-medium\",\n          variants[variant],\n          sizes[size],\n          className\n        )}\n        style={getDynamicStyles()}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nBadge.displayName = \"Badge\";\n\nexport default Badge;\n"]}