-- üö® Weave ERP ÌîÑÎ°úÎçïÏÖò Î≥¥Ïïà Ï¶âÏãú ÏàòÏ†ï
-- ÌîÑÎ°úÏ†ùÌä∏: nmwvuxfhyroxczfsrgdn (weave-erp.vercel.app)

-- 1) RLS ÏÑ±Îä• ÏµúÏ†ÅÌôî - profiles ÌÖåÏù¥Î∏î
DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;  
DROP POLICY IF EXISTS "Users can insert own profile" ON public.profiles;

CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (id = (SELECT auth.uid()));

CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (id = (SELECT auth.uid()));

CREATE POLICY "Users can insert own profile" ON public.profiles
  FOR INSERT WITH CHECK (id = (SELECT auth.uid()));

-- 2) RLS ÏÑ±Îä• ÏµúÏ†ÅÌôî - clients ÌÖåÏù¥Î∏î
DROP POLICY IF EXISTS "Users can view own clients" ON public.clients;
DROP POLICY IF EXISTS "Users can insert own clients" ON public.clients;
DROP POLICY IF EXISTS "Users can update own clients" ON public.clients;
DROP POLICY IF EXISTS "Users can delete own clients" ON public.clients;

CREATE POLICY "Users can view own clients" ON public.clients
  FOR SELECT USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can insert own clients" ON public.clients
  FOR INSERT WITH CHECK (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can update own clients" ON public.clients
  FOR UPDATE USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can delete own clients" ON public.clients
  FOR DELETE USING (user_id = (SELECT auth.uid()));

-- 3) RLS ÏÑ±Îä• ÏµúÏ†ÅÌôî - projects ÌÖåÏù¥Î∏î
DROP POLICY IF EXISTS "Users can view own projects" ON public.projects;
DROP POLICY IF EXISTS "Users can insert own projects" ON public.projects;
DROP POLICY IF EXISTS "Users can update own projects" ON public.projects;
DROP POLICY IF EXISTS "Users can delete own projects" ON public.projects;

CREATE POLICY "Users can view own projects" ON public.projects
  FOR SELECT USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can insert own projects" ON public.projects
  FOR INSERT WITH CHECK (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can update own projects" ON public.projects
  FOR UPDATE USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can delete own projects" ON public.projects
  FOR DELETE USING (user_id = (SELECT auth.uid()));

-- 4) RLS ÏÑ±Îä• ÏµúÏ†ÅÌôî - invoices ÌÖåÏù¥Î∏î
DROP POLICY IF EXISTS "Users can view own invoices" ON public.invoices;
DROP POLICY IF EXISTS "Users can insert own invoices" ON public.invoices;
DROP POLICY IF EXISTS "Users can update own invoices" ON public.invoices;
DROP POLICY IF EXISTS "Users can delete own invoices" ON public.invoices;

CREATE POLICY "Users can view own invoices" ON public.invoices
  FOR SELECT USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can insert own invoices" ON public.invoices
  FOR INSERT WITH CHECK (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can update own invoices" ON public.invoices
  FOR UPDATE USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can delete own invoices" ON public.invoices
  FOR DELETE USING (user_id = (SELECT auth.uid()));

-- 5) RLS ÏÑ±Îä• ÏµúÏ†ÅÌôî - documents ÌÖåÏù¥Î∏î
DROP POLICY IF EXISTS "Users can view own documents" ON public.documents;
DROP POLICY IF EXISTS "Users can insert own documents" ON public.documents;
DROP POLICY IF EXISTS "Users can update own documents" ON public.documents;
DROP POLICY IF EXISTS "Users can delete own documents" ON public.documents;

CREATE POLICY "Users can view own documents" ON public.documents
  FOR SELECT USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can insert own documents" ON public.documents
  FOR INSERT WITH CHECK (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can update own documents" ON public.documents
  FOR UPDATE USING (user_id = (SELECT auth.uid()));

CREATE POLICY "Users can delete own documents" ON public.documents
  FOR DELETE USING (user_id = (SELECT auth.uid()));

-- 6) ÏÑ±Îä•ÏùÑ ÏúÑÌïú Ïù∏Îç±Ïä§ Ï∂îÍ∞Ä
CREATE INDEX IF NOT EXISTS idx_documents_client_id ON public.documents(client_id);
CREATE INDEX IF NOT EXISTS idx_documents_invoice_id ON public.documents(invoice_id);
CREATE INDEX IF NOT EXISTS idx_documents_project_id ON public.documents(project_id);
CREATE INDEX IF NOT EXISTS idx_invoices_client_id ON public.invoices(client_id);

-- 7) Ìï®Ïàò Î≥¥Ïïà Í∞ïÌôî
DROP FUNCTION IF EXISTS public.update_updated_at_column CASCADE;
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER 
SECURITY DEFINER
SET search_path = public
LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;