# Cursor Rules for WEAVE Project

You are an expert assistant for the WEAVE project - a React + Next.js 14 TypeScript application with Supabase and Korean UI.

# Release Note Auto-Generator

When asked to update Release_Note.md:
1. **FIRST**: Read the existing Release_Note.md file to analyze current content
2. **EXTRACT**: Find the last ISSUE-[NUMBER] and REV[NUMBER] from existing entries
3. **AUTO-INCREMENT**: Add 1 to both numbers for the new entry
4. **FOLLOW**: This EXACT format for the new entry:

## Template Format:
```
#### ISSUE-[NUMBER]: [TITLE] ✅ 해결완료
- **발생일**: YYYY-MM-DD
- **해결일**: YYYY-MM-DD
- **증상**: [구체적 현상 기술]
- **위치**: [파일명:라인번호]
- **원인**: [즉각적 원인]
- **근본원인**: [시스템적 근본 원인]
- **대책**: 
  1. ✅ [해결 방안 1]
  2. ✅ [해결 방안 2]
- **우선순위**: [🔴/🟡/🟠/🟢] [Critical/High/Medium/Low]
- **버전**: V1.0.1_YYMMDD_REV###
- **테스트케이스**:
  ```javascript
  it('should [기대 동작]', async () => {
    // Given: [전제 조건]
    // When: [실행 동작]
    // Then: [기대 결과]
    expect([실제값]).toBe([기대값]);
  });
  ```
```

## Mandatory Rules:
1. **Korean Language**: Use formal Korean (존댓말) throughout
2. **No Speculation**: Avoid words like "아마", "추정됨", "?", "대략"
3. **Auto-Increment**: Issue numbers and REV numbers from last entry in Release_Note.md
4. **Priority Classification**: 
   - 🔴 Critical: System failure, compilation errors, security issues
   - 🟡 High: Feature breakdown, major UX problems
   - 🟠 Medium: UX improvements, performance optimization
   - 🟢 Low: Minor improvements, code cleanup
5. **Test Cases**: Always include JavaScript test with Given/When/Then format

## Project Context:
- Framework: React + Next.js 14 (App Router)
- Language: TypeScript + Korean UI
- Styling: Tailwind CSS with custom theme variables
- Auth: Supabase authentication
- State: Zustand with Immer middleware
- Testing: Playwright E2E tests

## File Structure:
- UI Components: `src/components/ui/`
- Pages: `src/app/` (App Router)
- Utils: `src/lib/`
- Stores: `src/stores/`
- Theme: `src/lib/theme/`

## Import Patterns:
```typescript
import Button from "@/components/ui/Button"
import { useTheme } from "@/lib/theme/ThemeContext"
import { cn } from "@/lib/utils"
```

## Version Format:
- Pattern: `V1.0.1_YYMMDD_REV###`
- Example: `V1.0.1_250820_REV009`
- Auto-increment REV number only for same-day releases

## Detailed Example Template:
```markdown
#### ISSUE-010: JSX 파일 확장자 오류 해결 ✅ 해결완료
- **발생일**: 2025-08-20
- **해결일**: 2025-08-20
- **증상**: TypeScript 컴파일 실패로 인한 사이트 전체 404 에러
- **위치**: src/lib/utils/user-display.ts:77-93
- **원인**: JSX 컴포넌트를 .ts 파일에 작성
- **근본원인**: TypeScript/JSX 파일 확장자 규칙 미준수
- **대책**: 
  1. ✅ .ts → .tsx 확장자 변경
  2. ✅ 손상된 .next 디렉토리 재생성
- **우선순위**: 🔴 Critical
- **버전**: V1.0.1_250820_REV008
- **테스트케이스**:
  ```javascript
  it('should compile JSX components without errors', async () => {
    // Given: JSX component in .tsx file
    // When: TypeScript compilation runs
    // Then: No compilation errors occur
    expect(compilationErrors).toHaveLength(0);
  });
  ```
```

## Coding Style Guide:

### React/TypeScript Patterns:
- UI Components: `@/components/ui/ComponentName`
- Utilities: `@/lib/utils`
- Theme: `@/lib/theme/ThemeContext`
- Types: Always export props interfaces

### File Structure Rules:
- UI Components: `src/components/ui/`
- Pages: `src/app/` (App Router)
- Utilities: `src/lib/`
- Stores: `src/stores/`

### Naming Conventions:
- Components: PascalCase
- Files: kebab-case or PascalCase
- Functions: camelCase
- Constants: UPPER_SNAKE_CASE

### CSS/Tailwind Patterns:
- Theme variables: `var(--color-primary-*)`
- Responsive: mobile-first approach
- Dark theme: CSS variable-based dynamic switching

### Language Rules:
- **Korean formal language (존댓말)** mandatory
- **Definitive statements** (no speculation)
- **Prohibited words**: "아마", "추정됨", "?", "대략", "보통", "생각됩니다"
- **Preferred words**: "확인됨", "분석 결과", "해결됨", "검증됨"

## GPT.md Advanced Features:

### Commit Range Analysis:
- Auto-calculate commits since last release/tag
- Parse Release_Note.md for last issue/version numbers
- Generate comprehensive change analysis

### Auto-Increment Logic:
- Issue numbers: Extract from "ISSUE-[0-9]+" pattern, add 1
- Version REV: Extract from "REV[0-9]{3}" pattern, add 1
- Date format: YYMMDD for current date

### Quality Assurance:
- Validate format with regex patterns
- Check required sections completion
- Verify test case inclusion
- Ensure priority classification

### Fallback Support:
- Generate skeleton when full analysis unavailable
- Provide manual completion guidance
- Maintain version consistency

## Release Note Quality Standards:
- **Completeness**: All 9 required sections
- **Clarity**: Clear problem and solution description  
- **Testability**: Executable test cases included
- **Consistency**: Format matching existing entries
- **Korean Language**: Formal tone throughout

## Token Optimization Strategy:
- Use Cursor for all release note generation
- Reserve Claude Code for critical system issues only
- Achieve 100% token savings on documentation tasks
- Maintain quality through structured templates
